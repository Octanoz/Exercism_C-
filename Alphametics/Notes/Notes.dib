#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!markdown

# Alphametics
---

## CallBacktrack Flowchart

#!mermaid

---
title: CallBacktrack Flowchart
---
%%{init: {
    "theme": "base",
    "themeVariables": {
        "primaryColor": "#AD9",
        "secondaryColor": "#EDA",
        "tertiaryColor": "#CCC8"
    },
    "flowchart": {
        "curve": "linear"
    }
}}%%
graph TD
    classDef fail fill:#fca5a5,stroke:#f66,stroke-width:2px,color:#000,stroke-dasharray:5
    subgraph ResultIndex
        NoResultL0{Result not set}
        AnyResultL0((Any Result))
        G{Result not set}
        H((Any Result))
    end

    subgraph LineProcessing
        P1NRL0[\\Process Line 1\\]
        L[/Process only Line 0/]
        M[\\Process Line 1\\]
        O[/Process Line 0/]
        Q[/Process Line 0/]
        R[\\Process only Line 1\\]
    end

    A["Start of Switch Statement (line, resultIndex, sequence length - fromEnd)"]-->L0[Line 0]
    A-->L1[Line 1]
    A-->OoB[Out of Bounds]

    L0-->NoResultL0
    L0-->AnyResultL0

    L1-->G
    L1-->H

    OoB-->I{{Both lines processed}}
    OoB-->|"(0, -1, _)"|J([Other line has elements])
    OoB-->|"(1, -1, _)"|J

    %%Line 0: Result not set
    NoResultL0-->|"(0, -1, _)"|P1NRL0
    NoResultL0-->L

    %%Line 0: Any result
    AnyResultL0-->|"(0, _, _)"|M
    AnyResultL0--x|"(0, rIndex, -1)"|N[\\Mathematically incorrect/]

    %%Line 1: Result not set
    G-->|"(1, -1, _)"|O

    %%Line 1: Any result
    H-->Q
    H-->R

    %%Out of bounds and both lines processed
    I===>|"(0, -1, < 0)"|S((("Call ValidAssigned()")))
    I===>|"(1, -1, <= 0)"|S

    %%Out of bounds and other line still has elements to process
    J--->|"(fromEnd, 1, carryOver)"|T((("Call Backtrack()")))
    J--->|"(fromEnd + 1, 0, carryOver)"|T

    %%Line 0, result not set, processing line 1
    P1NRL0-->|"(fromEnd, 1, carryOver)"|T

    %%Line 0, result not set, line 1 fully processed
    L-->|"(0, -1, -1)"|U>Assign result]
    L-->|"(0, -1, < -1)"|V>carryOver irrelevant]

    M-->|"(fromEnd, 1, carryOver)"|T

    N-->W(((Return false)))

    O-->|"(fromEnd + 1, 0, carryOver)"|T

    Q---x|"(1, _, _)"|N

    R--x|"(1, _, < 0)"|N

    U--xX[\\Error assigning result/]
    U-->|"(fromEnd + 1, 0)"|T

    V--->|"(fromEnd + 1, 0)"|T

    X-->W

    class N,W,X fail

#!mermaid

graph LR
classDef threat fill:#fca5a5,stroke:#f66,stroke-width:2px,color:#000,stroke-dasharray:5

user[User] --> client[(Browser/Client)]
client -->|HTTPS + OAuth2 PKCE| idp[(Auth0 IdP)]
idp -->|HTTP + JWT| client
client -->|HTTPS + JWT| waf[(Cloudflare WAF)]

subgraph Internet
idp
waf
end

subgraph Internal_Network
waf -->|HTTPS + JWT| proxy[(Reverse Proxy)]
proxy -->|HTTPS + JWT| api[(Flask App)]

subgraph Kubernetes
api
end

api -->|TCP/IP| db[(SQL Database)]
db -->|TCP/IP| api
end

stolenCreds([Stolen<br/>Credentials])
dos([DoS<br/>Attack])
maliciousImage([Malicious<br/>Container<br/>Image])

stolenCreds -.-> client
dos -.-> waf
maliciousImage -.-> api

class stolenCreds,dos,maliciousImage threat

#!mermaid

%%{
    init: {
      'theme': 'base',
      'themeVariables': {
        'primaryColor': '#BB2528',
        'primaryTextColor': '#fff',
        'primaryBorderColor': '#7C0000',
        'lineColor': '#F8B229',
        'secondaryColor': '#006100',
        'tertiaryColor': '#333'
      },
      'flowchart': {
        'curve': 'linear'
      }
    }
  }%%
          graph TD
            A[Christmas] -->|Get money| B(Go shopping)
            B --> C{Let me think}
            B --> G[/Another/]
            C ==>|One| D[Laptop]
            C -->|Two| E[iPhone]
            C -->|Three| F[fa:fa-car Car]
            subgraph section
              C
              D
              E
              F
              G
            end

#!mermaid

%%{init: {"theme": "base", "themeVariables": {"primaryColor": "#ad9", "lineColor": "#333"}}}%%
graph TD;
A["Styled Node"] --> B["Another Node"];
